{"version":3,"sources":["Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Form","props","onSubmit","contact","useForm","register","handleSubmit","errors","console","log","defaultValue","gender","name","ref","value","type","first","placeholder","last","email","App","API_URL","state","result","undefined","scanning","handleScan","data","a","setState","setContact","error","handleError","err","alert","getDimensions","width","window","innerWidth","height","innerHeight","sendContactID","contactID","info","fetch","response","ok","json","Error","results","submit","Promise","resolve","dimensions","this","delay","style","backgroundColor","position","zIndex","onError","onScan","legacyMode","isSafari","className","onClick","prevState","ua","navigator","userAgent","toLowerCase","indexOf","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sXAUO,SAASA,EAAKC,GAAe,IAC1BC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,QADe,EAEUC,cAAnCC,EAFyB,EAEzBA,SAAUC,EAFe,EAEfA,aAAcC,EAFC,EAEDA,OAGhC,OAFAC,QAAQC,IAAIF,GAIV,0BAAML,SAAUI,EAAaJ,IAC3B,+CACA,4BAAQQ,aAAcP,EAAQQ,OAAQC,KAAK,SAASC,IAAKR,GACvD,4BAAQS,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,WAEF,2BACEC,KAAK,OACLL,aAAcP,EAAQS,KAAKI,MAC3BC,YAAY,aACZL,KAAK,YACLC,IAAKR,IAEP,2BACEU,KAAK,OACLL,aAAcP,EAAQS,KAAKM,KAC3BD,YAAY,YACZL,KAAK,WACLC,IAAKR,IAEP,2BACEU,KAAK,QACLL,aAAcP,EAAQgB,MACtBF,YAAY,QACZL,KAAK,QACLC,IAAKR,IAGP,2BAAOU,KAAK,Y,6jBCiFHK,E,2MAxGbC,QAAU,6B,EAEVC,MAAe,CACbC,YAAQC,EACRC,UAAU,EACVtB,aAASqB,G,EAGXE,W,uCAAa,WAAOC,GAAP,SAAAC,EAAA,0DACPD,EADO,wBAET,EAAKE,SAAS,CACZN,OAAQI,EACRF,UAAU,IAJH,kBAQD,EAAKK,WAAWH,GARf,uDAUPnB,QAAQuB,MAAR,MAVO,yD,wDAebC,YAAc,SAACC,GACbC,MAAMD,I,EAGRE,cAAgB,iBAAmB,CACjCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,c,EAGjBC,c,uCAAgB,WAAOC,GAAP,eAAAd,EAAA,6DACdpB,QAAQmC,KAAK,yBAAb,UAA0C,EAAKtB,QAA/C,YAA0DqB,IAD5C,SAESE,MAAM,EAAKvB,SAFpB,YAERwB,EAFQ,QAGDC,GAHC,yCAILD,EAASE,QAJJ,aAMR,IAAIC,MANI,2C,wDAShBlB,W,uCAAa,WAAOY,GAAP,iBAAAd,EAAA,sEACe,EAAKa,cAAcC,GADlC,gBACHO,EADG,EACHA,QACR,EAAKpB,SAAS,CAAE1B,QAAS8C,EAAQ,KAFtB,2C,wDAKbC,O,uCAAS,WAAOvB,GAAP,SAAAC,EAAA,6DACPpB,QAAQmC,KAAK,iBAAkBhB,GADxB,kBAEA,IAAIwB,SAAQ,SAAAC,GACjBlB,MAAM,cAAgB,EAAKb,QAAU,uBACrC+B,QAJK,2C,wDAQT9C,a,uCAAe,WAAOqB,GAAP,SAAAC,EAAA,+EAEL,EAAKsB,OAAOvB,GAFP,OAGX,EAAKE,SAAS,CAAE1B,aAASqB,IAHd,+CAKXhB,QAAQuB,MAAR,MALW,wD,8HAgBL,IAAD,OAEDsB,EAAaC,KAAKnB,gBAFjB,EAGuBmB,KAAKhC,MAA3BG,EAHD,EAGCA,SAAUtB,EAHX,EAGWA,QAElB,OACE,oCACE,kBAAC,IAAD,CACEoD,MAAO9B,GAAY,IACnB+B,MAAK,KAAOH,EAAP,CAAmBI,gBAAiB,QAASC,SAAU,WAAYC,QAAS,IACjFC,QAASN,KAAKtB,YACd6B,OAAQP,KAAK5B,WACboC,WAAYR,KAAKS,WAEnB,yBAAKC,UAAWvC,EAAW,0BAA4B,WACpDtB,GAAW,kBAAC,EAAD,CAAMD,SAAUoD,KAAKhD,aAAcH,QAASA,KACtDA,GACA,4BAAQ8D,QAAS,kBAAM,EAAKnC,WAAW,aAAvC,qBAEF,0BACEmC,QAAS,WACP,EAAKpC,UAAS,SAAAqC,GAAS,MAAK,CAC1BzC,UAAWyC,EAAUzC,eAIxBA,EAAW,KAAO,W,+BAhC3B,IAAM0C,EAAKC,UAAUC,UAAUC,cAC/B,IAA6B,GAAzBH,EAAGI,QAAQ,UACb,QAASJ,EAAGI,QAAQ,WAAa,O,GAnErBC,aCTEC,QACW,cAA7BpC,OAAOqC,SAASC,UAEa,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCXJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBZ,WACrBA,UAAUa,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0d6fff1.chunk.js","sourcesContent":["import React from 'react';\nimport useForm from 'react-hook-form';\nimport { Contact } from './App';\nimport ImageSelectPreview from 'react-image-select-pv';\n\ninterface Props {\n  onSubmit: (data: Partial<Contact>) => void;\n  contact: Contact;\n}\n\nexport function Form(props: Props) {\n  const { onSubmit, contact } = props;\n  const { register, handleSubmit, errors } = useForm();\n  console.log(errors);\n\n  return (\n    // @ts-ignore\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <h2>Contact details</h2>\n      <select defaultValue={contact.gender} name=\"gender\" ref={register}>\n        <option value=\"male\">Male</option>\n        <option value=\"female\">Female</option>\n      </select>\n      <input\n        type=\"text\"\n        defaultValue={contact.name.first}\n        placeholder=\"First Name\"\n        name=\"firstName\"\n        ref={register}\n      />\n      <input\n        type=\"text\"\n        defaultValue={contact.name.last}\n        placeholder=\"Last Name\"\n        name=\"lastName\"\n        ref={register}\n      />\n      <input\n        type=\"email\"\n        defaultValue={contact.email}\n        placeholder=\"Email\"\n        name=\"email\"\n        ref={register}\n      />\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n","import React, { Component } from 'react';\nimport QrReader from 'react-qr-scanner';\nimport * as APIResponseMockData from './mockContact.json';\nimport './App.css';\nimport './Form.css';\nimport { Form } from './Form';\n\ninterface Props {}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n}\n\nexport type Contact = typeof APIResponseMockData['results'][0];\ninterface State {\n  result?: string;\n  scanning: boolean;\n  contact?: any;\n}\n\nclass App extends Component<Props, State> {\n  API_URL = 'https://randomuser.me/api/';\n\n  state: State = {\n    result: undefined,\n    scanning: false,\n    contact: undefined,\n  };\n\n  handleScan = async (data: string | null) => {\n    if (data) {\n      this.setState({\n        result: data,\n        scanning: false,\n      });\n\n      try {\n        await this.setContact(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  handleError = (err: ErrorEvent) => {\n    alert(err);\n  };\n\n  getDimensions = (): Dimensions => ({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  sendContactID = async (contactID: string): Promise<typeof APIResponseMockData> => {\n    console.info('Receiving contact from', `${this.API_URL}/${contactID}`);\n    const response = await fetch(this.API_URL);\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error();\n  };\n\n  setContact = async (contactID: string): Promise<void> => {\n    const { results } = await this.sendContactID(contactID);\n    this.setState({ contact: results[0] });\n  };\n\n  submit = async (data: Partial<Contact>) => {\n    console.info('Contact posted', data);\n    return new Promise(resolve => {\n      alert('Posting to ' + this.API_URL + ', check the console');\n      resolve();\n    });\n  };\n\n  handleSubmit = async (data: Partial<Contact>) => {\n    try {\n      await this.submit(data);\n      this.setState({ contact: undefined });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  get isSafari() {\n    const ua = navigator.userAgent.toLowerCase();\n    if (ua.indexOf('safari') != -1) {\n      return !(ua.indexOf('chrome') > -1);\n    }\n  }\n\n  render() {\n    //Todo: implement onDimensionsChange listener\n    const dimensions = this.getDimensions();\n    const { scanning, contact } = this.state;\n\n    return (\n      <>\n        <QrReader\n          delay={scanning && 100}\n          style={{ ...dimensions, backgroundColor: 'black', position: 'absolute', zIndex: -1 }}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          legacyMode={this.isSafari}\n        />\n        <div className={scanning ? 'Overlay  Overlay-Active' : 'Overlay'}>\n          {contact && <Form onSubmit={this.handleSubmit} contact={contact} />}\n          {!contact && (\n            <button onClick={() => this.setContact('SOME_ID')}>Read fake contact</button>\n          )}\n          <span\n            onClick={() => {\n              this.setState(prevState => ({\n                scanning: !prevState.scanning,\n              }));\n            }}\n          >\n            {scanning ? 'ON' : 'OFF'}\n          </span>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}